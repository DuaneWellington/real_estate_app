# real_estate_django/realestate/settings.py

"""
Django settings for realestate project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
from decouple import config, Csv
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# get authentication for accessing Realtyna API
# def get_api_authorization():
# token_url = "https://realtyfeed-sso.auth.us-east-1.amazoncognito.com/oauth2/token"
#     # logic to generate authorization
#     return 'authorization_value'

DJANGO_SECRET_KEY = os.getenv('DJANGO_SECRET_KEY')

X_RAPIDAPI_KEY = os.getenv('X_RAPIDAPI_KEY')
X_RAPIDAPI_HOST = os.getenv('X_RAPIDAPI_HOST')
AUTHORIZATION = os.getenv('AUTHORIZATION')
X_API_KEY= os.getenv('X_API_KEY')

client_id = config('REALTYNA_CLIENT_ID')
client_secret = config('REALTYNA_CLIENT_SECRET')
grant_type = config('REALTYNA_GRANT_TYPE')

# Request body parameters
data = {
    "client_id": client_id,
    "client_secret": client_secret,
    "grant_type": "client_credentials",
}

# try:
#     # Send POST request to obtain access token
#     response = requests.post(token_url, data=data)
#     response.raise_for_status()  # Raise an exception for 4xx or 5xx status codes

#     # Parse JSON response
#     json_response = response.json()

#     # Extract and return access token
#     access_token = json_response.get("access_token")
#     return access_token

# except requests.exceptions.RequestException as e:
#     # Handle request exceptions (e.g., connection error, timeout)
#     logging.error(f"Error obtaining access token: {e}")
#     return None
# except json.decoder.JSONDecodeError as e:
#     # Handle JSON decoding errors
#     logging.error(f"Error decoding JSON response: {e}")
#     return None
# except KeyError as e:
#     # Handle missing key errors
#     logging.error(f"Error parsing JSON response: {e}")
#     return None



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-negojr097yu_ekgyicl3lo_zba6lux_tg+9c^ouw1jva+pejp9'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    "dwrealestate-74c439c17de3.herokuapp.com",
    "localhost",
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    "whitenoise.runserver_nostatic",  # new
    'django.contrib.staticfiles',
    'main_app',
    'realestate',
    'allauth',
    # 'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'tailwind',
    'theme',
    'django_browser_reload',
]

TAILWIND_APP_NAME = 'theme'

INTERNAL_IPS = [
    "127.0.0.1",
]

AUTHENTICATION_BACKENDS = [
    'allauth.account.auth_backends.AuthenticationBackend',
]

SITE_ID = 1  # You may need to configure the Site model

LOGIN_REDIRECT_URL = '/'  # Set the URL to redirect to after a successful login

# Optional: Specify the social account providers you want to enable
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': 'your-google-client-id',
            'secret': 'your-google-client-secret',
            'key': '',
        }
    },
    # Add other providers as needed
}

STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedStaticFilesStorage",
},
}


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_browser_reload.middleware.BrowserReloadMiddleware',
]

ROOT_URLCONF = 'realestate.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'realestate.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'realestate',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]



# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'
# STATICFILES_DIRS = [
#     BASE_DIR / 'static'
# ]

STATIC_ROOT = BASE_DIR / 'staticfiles'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_REDIRECT_URL = 'profile'
LOGOUT_REDIRECT_URL = 'home'

# Configure Django App for Heroku.
# import django_on_heroku
# django_on_heroku.settings(locals())